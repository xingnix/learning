{"version": 2, "width": 235, "height": 45, "timestamp": 1695114707, "env": {"SHELL": "/bin/zsh", "TERM": "xterm-256color"}}
[0.073916, "o", "\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                                                          \r \r"]
[0.074817, "o", "\u001b]2;xing@x-desktop:/run/media/xing/8b421de9-f896-4331-bc6e-f66d512fa937/xing/github/learning/machinelearning/python/concept\u0007\u001b]1;..ython/concept\u0007"]
[0.076679, "o", "\u001b]7;file://x-desktop/run/media/xing/8b421de9-f896-4331-bc6e-f66d512fa937/xing/github/learning/machinelearning/python/concept\u0007"]
[0.125969, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b[0m\u001b[49m\u001b[39m\u001b[0m\u001b[47m\u001b[38;5;30m \u001b[0m\u001b[38;5;30m\u001b[47m\u001b[47m\u001b[38;5;30m \u001b[0m\u001b[38;5;30m\u001b[47m\u001b[48;5;30m\u001b[37m\u001b[0m\u001b[37m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m  /\u001b[1m\u001b[38;5;254m\u001b[48;5;30m\u001b[38;5;255mrun\u001b[0m\u001b[38;5;255m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/\u001b[38;5;250mme\u001b[0m\u001b[38;5;250m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/\u001b[38;5;250mx\u001b[0m\u001b[38;5;250m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/\u001b[38;5;250m8\u001b[0m\u001b[38;5;250m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/xing/github/\u001b[1m\u001b[38;5;254m\u001b[48;5;30m\u001b[38;5;255mlearning\u001b[0m\u001b[38;5;255m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/machinelearning/python/\u001b[1m\u001b[38;5;254m\u001b[48;5;30m\u001b[38;5;255mconcept\u001b[0m\u001b[38;5;255m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m\u001b[0m\u001b[38;5;254m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m \u001b[0m\u001b[38;5;254m\u001b[48;5;30m\u001b[43m\u001b[38;5;30m\u001b[0m\u001b[38;5;30m\u001b[43m\u001b[43m\u001b[30m  \u001b[30m master \u001b[30m!7 \u001b[30m?1\u001b[0m\u001b[30m\u001b[43m\u001b[43m\u001b[30m \u001b[0m\u001b[30m\u001b[43m\u001b[49m\u001b[33m\u001b[0m\u001b[33m\u001b[49m\u001b[39m \u001b[0m\u001b[49m\u001b[39m\u001b[K\u001b[138C\u001b[0m\u001b[49m\u001b[30m\u001b[0m\u001b[30m\u001b[40m\u001b[32m \u001b[0m\u001b[32m\u001b[40m\u001b[40m\u001b[32m✔\u001b[0m\u001b[32m\u001b[40m\u001b[40m\u001b[32m \u001b[0m\u001b[32m\u001b[40m\u001b[49m\u001b[39m\u001b[142D"]
[0.126371, "o", "\u001b[?2004h"]
[1.806789, "o", "\u001b[1m\u001b[31mc\u001b[0m\u001b[39m"]
[1.808422, "o", "\b\u001b[1m\u001b[31mc\u001b[0m\u001b[39m\u001b[38;5;244md concept\u001b[39m\u001b[9D"]
[1.958532, "o", "\b\u001b[1m\u001b[31mc\u001b[1m\u001b[31ma\u001b[0m\u001b[39m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[8D"]
[1.959698, "o", "\u001b[38;5;244mt smtp.py\u001b[39m\u001b[9D"]
[2.324663, "o", "\b\b\u001b[0m\u001b[32mc\u001b[0m\u001b[32ma\u001b[32mt\u001b[39m"]
[2.4926, "o", "\u001b[39m "]
[3.05469, "o", "\u001b[39mp\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \b\b\b\b\b\b"]
[3.110362, "o", "a"]
[3.486835, "o", "\b \b"]
[3.605718, "o", "\b \b"]
[3.607148, "o", "\u001b[38;5;244msmtp.py\u001b[39m\b\b\b\b\b\b\b"]
[3.72587, "o", "\u001b[39m\u001b[4ma\u001b[24m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \b\b\b\b\b\b"]
[3.885885, "o", "\b\u001b[4ma\u001b[4mp\u001b[24m"]
[4.021812, "o", "\b\u001b[4mp\u001b[4mp\u001b[24m"]
[4.121616, "o", "\b\u001b[4mp\u001b[4mlicanteliminate.\u001b[24m"]
[5.463564, "o", "\b\u001b[4m.\u001b[4mp\u001b[24m"]
[5.73508, "o", "\b\u001b[4mp\u001b[4my\u001b[24m\u001b[1m \u001b[0m"]
[7.454402, "o", "\b\u001b[0m \b"]
[7.460206, "o", "\u001b[?2004l\r\r\n"]
[7.460414, "o", "\u001b]2;cat applicanteliminate.py\u0007\u001b]1;\u0007"]
[7.462089, "o", "import re\r\nfrom functools import reduce\r\n\r\ninput_string = \"\"\"\r\nExample Sky AirTemp Humidity Wind Water Forecast  EnjoySport\r\n1       Sunny  Warm  Normal  Strong  Warm  Same   Yes\r\n2       Sunny  Warm  High    Strong  Warm  Same   Yes\r\n3       Rainy  Cold  High    Strong  Warm  Change No\r\n4       Sunny  Warm  High    Strong  Cool  Change Yes\"\"\"\r\nlines = list(map(lambda x: list(filter(lambda y: y != '',\r\n                             re.split(' +', x)))[1:],  # drop first item \"Example\"\r\n            filter(lambda x: x != '', re.split('\\n', input_string))))\r\nnames, data = lines[0], lines[1:]\r\ndata_lines = list(map(lambda x: dict(zip(names, x)), data))\r\nvalues = dict(zip(names,\r\n                  reduce(lambda x, y:\r\n                         map(lambda z:\r\n                             z[0] | set([z[1]]) if type(z[0]) is set else set(z),\r\n                             zip(x, y)),\r\n                         lines[1:])))\r\nnames, target = names[:-1], names[-1]  # the last item is target\r\np = 'Yes'\r\nn = 'No'\r\n\r\n\r\n\r\ndef consistant(sample,rule):\r\n     passed=reduce(lambda x, y: x and y,\r\n                     map(lambda name:\r\n                            sample[name] == rule[name] or rule[name] == '?',\r\n                         names))\r\n     return passed if sample[target] == p else not passed\r\n\r\n    \r\ndef remove_inconsistant(d,Rules):\r\n        consistant_rules=[]\r\n        inconsistant_rules=[]\r\n        for r in Rules:\r\n            if consistant(d,r):\r\n                consistant_rules.append(r)\r\n            else:\r\n                inconsistant_rules.append(r)\r\n        return consistant_rules,inconsistant_rules\r\n\r\ndef generalthan(Rules,h):\r\n        for r in Rules:\r\n             if reduce(lambda x,y : x and y,\r\n                           [ r[name]== h[name] or r[name]=='?' for name in names],True):\r\n                 return True\r\n        return False\r\n\r\n\r\ndef duplicate(Rules,h):\r\n        for r in Rules:\r\n             if reduce(lambda x,y : x and y,\r\n                           [ r[name]== h[name] for name in names],True):\r\n                 return True\r\n        return False\r\n\r\ndef specialthan(Rules,h):\r\n        for r in Rules:\r\n             if reduce(lambda x,y : x and y,\r\n                           [ r[name]==None or h[name]== r[name] or h[name]=='?' for name in names],True):\r\n                 return True\r\n        return False\r\n\r\ndef minigeneralize(G,S,h,d):\r\n    H=[]\r\n    for name in names:\r\n        if h[name]==None:\r\n            h[name]=d[name]\r\n        elif h[name]!=d[name]:\r\n            h[name]='?'\r\n    if generalthan(G,h) and not specialthan(S,h) and not duplicate(S,h):  H.append(h)\r\n    return H\r\n\r\ndef minispecialize(S,G,g,d):\r\n    H = []\r\n    for name in names:\r\n        if g[name]=='?':\r\n            for value in values[name]:\r\n                  if value!=d[name]:\r\n                       h = g.copy()\r\n                       h[name] = value\r\n                       if not generalthan(G,h) and specialthan(S,h) and not duplicate(G,h):\r\n                           H.append(h)\r\n    return H\r\n\r\n\r\nG=[dict(zip(names,map(lambda x: '?', names)))]\r\nS=[dict(zip(names,map(lambda x: None, names)))]\r\nfor d in data_lines:\r\n    if d[target]==p:\r\n        G,_=remove_inconsistant(d,G)\r\n        S,E=remove_inconsistant(d,S)\r\n        for s in E:\r\n            S.extend(minigeneralize(G,S,s,d))\r\n    else:\r\n        G,E=remove_inconsistant(d,G)\r\n        S,_=remove_inconsistant(d,S)\r\n        for g in E:\r\n            G.extend(minispecialize(S,G,g,d))\r\n\r\ndef prettyprint(Rules):\r\n    for g in Rules:\r\n        print(\"--\")\r\n        for name in names:\r\n             print( name+\" : \" +g[name])\r\n\r\nprint(\"_________ G _________\")\r\nprettyprint(G)\r\nprint(\"_________ S _________\")\r\nprettyprint(S)\r\n"]
[7.462575, "o", "\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                                                          \r \r"]
[7.462784, "o", "\u001b]2;xing@x-desktop:/run/media/xing/8b421de9-f896-4331-bc6e-f66d512fa937/xing/github/learning/machinelearning/python/concept\u0007"]
[7.462872, "o", "\u001b]1;..ython/concept\u0007"]
[7.467048, "o", "\u001b]7;file://x-desktop/run/media/xing/8b421de9-f896-4331-bc6e-f66d512fa937/xing/github/learning/machinelearning/python/concept\u0007"]
[7.50464, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b[0m\u001b[49m\u001b[39m\u001b[0m\u001b[47m\u001b[38;5;30m \u001b[0m\u001b[38;5;30m\u001b[47m\u001b[47m\u001b[38;5;30m \u001b[0m\u001b[38;5;30m\u001b[47m\u001b[48;5;30m\u001b[37m\u001b[0m\u001b[37m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m  /\u001b[1m\u001b[38;5;254m\u001b[48;5;30m\u001b[38;5;255mrun\u001b[0m\u001b[38;5;255m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/\u001b[38;5;250mme\u001b[0m\u001b[38;5;250m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/\u001b[38;5;250mx\u001b[0m\u001b[38;5;250m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/\u001b[38;5;250m8\u001b[0m\u001b[38;5;250m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/xing/github/\u001b[1m\u001b[38;5;254m\u001b[48;5;30m\u001b[38;5;255mlearning\u001b[0m\u001b[38;5;255m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/machinelearning/python/\u001b[1m\u001b[38;5;254m\u001b[48;5;30m\u001b[38;5;255mconcept\u001b[0m\u001b[38;5;255m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m\u001b[0m\u001b[38;5;254m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m \u001b[0m\u001b[38;5;254m\u001b[48;5;30m\u001b[43m\u001b[38;5;30m\u001b[0m\u001b[38;5;30m\u001b[43m\u001b[43m\u001b[30m  \u001b[30m master \u001b[30m!7 \u001b[30m?1\u001b[0m\u001b[30m\u001b[43m\u001b[43m\u001b[30m \u001b[0m\u001b[30m\u001b[43m\u001b[49m\u001b[33m\u001b[0m\u001b[33m\u001b[49m\u001b[39m \u001b[0m\u001b[49m\u001b[39m\u001b[K\u001b[138C\u001b[0m\u001b[49m\u001b[30m\u001b[0m\u001b[30m\u001b[40m\u001b[32m \u001b[0m\u001b[32m\u001b[40m\u001b[40m\u001b[32m✔\u001b[0m\u001b[32m\u001b[40m\u001b[40m\u001b[32m \u001b[0m\u001b[32m\u001b[40m\u001b[49m\u001b[39m\u001b[142D"]
[7.505462, "o", "\u001b[?2004h"]
[11.119533, "o", "\u001b[1m\u001b[31mp\u001b[0m\u001b[39m"]
[11.121396, "o", "\b\u001b[1m\u001b[31mp\u001b[0m\u001b[39m\u001b[38;5;244ms -A |grep -i emacs\u001b[39m\u001b[19D"]
[11.375519, "o", "\b\u001b[1m\u001b[31mp\u001b[1m\u001b[31my\u001b[0m\u001b[39m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[18D"]
[11.377454, "o", "\u001b[38;5;244mthon tools/demo.py \\\u001b[39m\r\r\n\u001b[38;5;244m    --config experiments/siamrpn_r50_l234_dwxcorr/config.yaml \\\u001b[39m\u001b[K\r\r\n\u001b[38;5;244m    --snapshot experiments/siamrpn_r50_l234_dwxcorr/model.pth\u001b[39m\u001b[K\r\r\n\u001b[38;5;244m     --video demo/bag.avi\u001b[39m\u001b[K\u001b[3A\u001b[69C"]
[11.550285, "o", "\b\b\u001b[1m\u001b[31mp\u001b[1m\u001b[31my\u001b[1m\u001b[31mt\u001b[0m\u001b[39m"]
[11.678938, "o", "\b\u001b[1m\u001b[31mt\u001b[1m\u001b[31mh\u001b[0m\u001b[39m"]
[11.741957, "o", "\b\u001b[1m\u001b[31mh\u001b[1m\u001b[31mo\u001b[0m\u001b[39m"]
[11.89933, "o", "\b\b\b\b\b\u001b[0m\u001b[32mp\u001b[0m\u001b[32my\u001b[0m\u001b[32mt\u001b[0m\u001b[32mh\u001b[0m\u001b[32mo\u001b[32mn\u001b[39m"]
[12.189382, "o", "\u001b[39m "]
[12.359642, "o", "\u001b[39m\u001b[4ma\u001b[24m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[1B\r\u001b[K\u001b[1B\u001b[K\u001b[1B\u001b[K\u001b[3A\u001b[100C"]
[12.494802, "o", "\b\u001b[4ma\u001b[4mp\u001b[24m"]
[12.630571, "o", "\b\u001b[4mp\u001b[4mp\u001b[24m"]
[12.83074, "o", "\b\u001b[4mp\u001b[4ml\u001b[24m"]
[12.974266, "o", "\b\u001b[4ml\u001b[4mi\u001b[24m"]
[13.172328, "o", "\b\u001b[4mi\u001b[4mcanteliminate.py\u001b[24m\u001b[1m \u001b[0m"]
[14.50277, "o", "\b\u001b[0m \b"]
[14.508738, "o", "\u001b[?2004l\u001b[1B\r"]
[14.508832, "o", "\u001b]2;python applicanteliminate.py\u0007\u001b]1;\u0007"]
[14.540118, "o", "_________ G _________\r\n--\r\nSky : Sunny\r\nAirTemp : ?\r\nHumidity : ?\r\nWind : ?\r\nWater : ?\r\nForecast : ?\r\n--\r\nSky : ?\r\nAirTemp : Warm\r\nHumidity : ?\r\nWind : ?\r\nWater : ?\r\nForecast : ?\r\n"]
[14.540171, "o", "_________ S _________\r\n--\r\nSky : Sunny\r\nAirTemp : Warm\r\nHumidity : ?\r\nWind : Strong\r\nWater : ?\r\nForecast : ?\r\n"]
[14.5448, "o", "\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                                                          \r \r"]
[14.544911, "o", "\u001b]2;xing@x-desktop:/run/media/xing/8b421de9-f896-4331-bc6e-f66d512fa937/xing/github/learning/machinelearning/python/concept\u0007\u001b]1;..ython/concept\u0007"]
[14.548087, "o", "\u001b]7;file://x-desktop/run/media/xing/8b421de9-f896-4331-bc6e-f66d512fa937/xing/github/learning/machinelearning/python/concept\u0007"]
[14.585015, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b[0m\u001b[49m\u001b[39m\u001b[0m\u001b[47m\u001b[38;5;30m \u001b[0m\u001b[38;5;30m\u001b[47m\u001b[47m\u001b[38;5;30m \u001b[0m\u001b[38;5;30m\u001b[47m\u001b[48;5;30m\u001b[37m\u001b[0m\u001b[37m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m  /\u001b[1m\u001b[38;5;254m\u001b[48;5;30m\u001b[38;5;255mrun\u001b[0m\u001b[38;5;255m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/\u001b[38;5;250mme\u001b[0m\u001b[38;5;250m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/\u001b[38;5;250mx\u001b[0m\u001b[38;5;250m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/\u001b[38;5;250m8\u001b[0m\u001b[38;5;250m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/xing/github/\u001b[1m\u001b[38;5;254m\u001b[48;5;30m\u001b[38;5;255mlearning\u001b[0m\u001b[38;5;255m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m/machinelearning/python/\u001b[1m\u001b[38;5;254m\u001b[48;5;30m\u001b[38;5;255mconcept\u001b[0m\u001b[38;5;255m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m\u001b[0m\u001b[38;5;254m\u001b[48;5;30m\u001b[48;5;30m\u001b[38;5;254m \u001b[0m\u001b[38;5;254m\u001b[48;5;30m\u001b[43m\u001b[38;5;30m\u001b[0m\u001b[38;5;30m\u001b[43m\u001b[43m\u001b[30m  \u001b[30m master \u001b[30m!7 \u001b[30m?1\u001b[0m\u001b[30m\u001b[43m\u001b[43m\u001b[30m \u001b[0m\u001b[30m\u001b[43m\u001b[49m\u001b[33m\u001b[0m\u001b[33m\u001b[49m\u001b[39m \u001b[0m\u001b[49m\u001b[39m\u001b[K\u001b[138C\u001b[0m\u001b[49m\u001b[30m\u001b[0m\u001b[30m\u001b[40m\u001b[32m \u001b[0m\u001b[32m\u001b[40m\u001b[40m\u001b[32m✔\u001b[0m\u001b[32m\u001b[40m\u001b[40m\u001b[32m \u001b[0m\u001b[32m\u001b[40m\u001b[49m\u001b[39m\u001b[142D"]
[14.585874, "o", "\u001b[?2004h"]
[19.378524, "o", "\u001b[?2004l\r\r\n"]
